{
  "filezip": 1,
  "zipfile": 3,
  "codecs": 1,
  " codecs": 1,
  "queue\n": 103,
  "collections\n": 648,
  "heapq\n": 117,
  "math\n": 2960,
  "time\n": 4,
  "numpy as np\n": 108,
  "random\n": 1633,
  "colleations\n": 0,
  "sys\n": 2138,
  "java.util.*;\n": 23,
  "re\n": 1611,
  " math\n": 10,
  "itertools\n": 525,
  "string\n": 24,
  "operator\n": 70,
  "copy\n": 159,
  "functools\n": 96,
  "static java.lang.System.exit;\n": 10,
  "java.util.Stack;\n": 15,
  "java.util.Scanner;\n": 25,
  "java.util.HashMap;\n": 11,
  "java.util.PriorityQueue;\n": 1,
  "java.util.LinkedList;\n": 20,
  "java.io.BufferedReader;\n": 20,
  "java.io.IOException;\n": 20,
  "java.io.InputStreamReader;\n": 20,
  "java.util.ArrayList;\n": 19,
  "java.util.Queue;\n": 15,
  "java.util.Map;\n": 2,
  "numpy\n": 29,
  "os\n": 8,
  "java.util.Deque;\n": 1,
  "sys  \n": 1,
  "cmath\n": 8,
  "math  # 向上取整用ceil，次数+1为边长，猪为维度\n": 0,
  "json\n": 101,
  "sys;\n": 4,
  "math as m\n": 3,
  "bisect\n": 118,
  "math                       #如果所有孩子都>m，则最后一个孩子是最后回家的              \n": 2,
  "cache\n": 0,
  "sys   \n": 23,
  "re \n": 1,
  "sys \n": 2,
  "java.util.List;\n": 3,
  "re, math\n": 1,
  "numpy as np \n": 1,
  "numpy as np": 0,
  "re;\n": 75,
  " re;\n": 1,
  "math;\n": 11,
  "collections, math\n": 4,
  " collections;\n": 0,
  " time;\n": 1,
  " cmath\n": 0,
  "ast\n": 107,
  "permutations\n": 0,
  "java.util\n": 0,
  "heapq as hq\n": 0,
  "Queue\n": 1,
  " ast\n": 4,
  "threading\n": 4,
  " functools\n": 7,
  "collections, operator\n": 2,
  " re\n": 8,
  "_functools\n": 1,
  "java.util.HashMap;import java.util.Map;import java.util.Scanner;  public class Main {    static int maxLen = 0;         public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        TreeNode root = createTree(scanner, n);        int sum = scanner.nextInt();        Map<Integer, Integer> map = new HashMap<>();        map.put(0, 0);        maxLength(root,sum,map,0,1);        System.out.print(maxLen);    }                   private static void maxLength(TreeNode node, int sum, Map<Integer, Integer> map, int preSum, int level) {        if(node==null) return;        int currSum = preSum + node.value;        if(!map.containsKey(currSum)) {            map.put(currSum, level);        }        if(map.containsKey(currSum-sum)) {            maxLen = Math.max(maxLen, level - map.get(currSum-sum));        }        maxLength(node.left,sum,map,currSum,level+1);        maxLength(node.right,sum,map,currSum,level+1);        if(map.get(currSum) == level) {            map.remove(currSum);        }    }       public static TreeNode createTree(Scanner scanner,int n) {        Map<Integer, TreeNode> map = new HashMap<Integer, TreeNode>();        int val = scanner.nextInt();        TreeNode root = new TreeNode();        map.put(val, root);        for(int i=0;i<n;i++) {            int father = scanner.nextInt();            TreeNode node = map.get(father);                         int leftId = scanner.nextInt();            if(leftId!=0) {                TreeNode  left = new TreeNode();                map.put(leftId,left );                node.left = left;            }                         int rightId = scanner.nextInt();            if(rightId != 0) {                TreeNode right = new TreeNode();                map.put(rightId, right);                node.right = right;            }                         int value = scanner.nextInt();            node.value = value;                     }        return root;    }}  class TreeNode{    int value;    TreeNode left;    TreeNode right;    public TreeNode(int value, TreeNode left, TreeNode right) {        super();        this.value = value;        this.left = left;        this.right = right;    }    public TreeNode(int value) {        super();        this.value = value;        this.left = null;        this.right = null;    }    public TreeNode() {    }     }": 1,
  "java.util.HashMap;import java.util.Map;import java.util.Scanner;  public class Main {    static int maxLen = 0;         public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        TreeNode root = createTree(scanner, n);        int sum = scanner.nextInt();        Map<Integer, Integer> map = new HashMap<>();        map.put(0, 0);        maxLength(root,sum,map,0,1);        System.out.println(maxLen);    }                   private static void maxLength(TreeNode node, int sum, Map<Integer, Integer> map, int preSum, int level) {        if(node==null) return;        int currSum = preSum + node.value;        if(!map.containsKey(currSum)) {            map.put(currSum, level);        }        if(map.containsKey(currSum-sum)) {            maxLen = Math.max(maxLen, level - map.get(currSum-sum));        }        maxLength(node.left,sum,map,currSum,level+1);        maxLength(node.right,sum,map,currSum,level+1);        if(map.get(currSum) == level) {            map.remove(currSum);        }    }       public static TreeNode createTree(Scanner scanner,int n) {        Map<Integer, TreeNode> map = new HashMap<Integer, TreeNode>();        int val = scanner.nextInt();        TreeNode root = new TreeNode();        map.put(val, root);        for(int i=0;i<n;i++) {            int father = scanner.nextInt();            TreeNode node = map.get(father);                         int leftId = scanner.nextInt();            if(leftId!=0) {                TreeNode  left = new TreeNode();                map.put(leftId,left );                node.left = left;            }                         int rightId = scanner.nextInt();            if(rightId != 0) {                TreeNode right = new TreeNode();                map.put(rightId, right);                node.right = right;            }                         int value = scanner.nextInt();            node.value = value;                     }        return root;    }}  class TreeNode{    int value;    TreeNode left;    TreeNode right;    public TreeNode(int value, TreeNode left, TreeNode right) {        super();        this.value = value;        this.left = left;        this.right = right;    }    public TreeNode(int value) {        super();        this.value = value;        this.left = null;        this.right = null;    }    public TreeNode() {    }     }": 0,
  "java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.LinkedList;import java.util.Queue; public class Main {    public static void printByLevel(Node root) {        if (root == null) {            return;        }        Queue<Node> queue = new LinkedList<>();        queue.offer(root);        int level = 1;        Node last = root;        Node nlast = null;        System.out.print(\"Level \" + level++ + \" : \");        while (!queue.isEmpty()) {            root = queue.poll();            System.out.print(root.value + \" \");            if (root.left != null) {                queue.offer(root.left);                nlast = root.left;            }            if (root.right != null) {                queue.offer(root.right);                nlast = root.right;            }            if (root == last && !queue.isEmpty()) {                System.out.println();                System.out.print(\"Level \" + level++ +\" : \");                last = nlast;            }        }    }     public static void printZigZag(Node root) {        if (root == null) {            return;        }        Queue<Node> queue = new LinkedList<>();        queue.offer(root);        int level = 1;        Node last = root;        Node nlast = null;        boolean judge = false;        ArrayList<Node> arrayList = new ArrayList<>();        System.out.print(\"Level \" + level++ + \" from left to right : \");        while (!queue.isEmpty()) {            root = queue.poll();            arrayList.add(root);            if (root.left != null) {                queue.offer(root.left);                nlast = root.left;            }            if (root.right != null) {                queue.offer(root.right);                nlast = root.right;            }            if (root == last && !queue.isEmpty()) {                if (judge) {                    for (int i = arrayList.size() - 1; i >= 0; i--) {                        System.out.print(arrayList.get(i).value + \" \");                    }                } else {                    for (int i = 0; i <= arrayList.size() - 1; i++) {                        System.out.print(arrayList.get(i).value + \" \");                    }                }                arrayList.clear();                judge = !judge;                System.out.println();                if (judge) {                    System.out.print(\"Level \" + level++ + \" from right to left : \");                } else {                    System.out.print(\"Level \" + level++ + \" from left to right : \");                }                last = nlast;            }        }        if (judge) {            for (int i = arrayList.size() - 1; i >= 0; i--) {                System.out.print(arrayList.get(i).value + \" \");            }        } else {            for (int i = 0; i <= arrayList.size() - 1; i++) {                System.out.print(arrayList.get(i).value + \" \");            }        }    }     public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        String[] strings = br.readLine().split(\" \");        int n = Integer.parseInt(strings[0]);        int root = Integer.parseInt(strings[1]);        Node head1 = new Node(root);        int[][] arr1 = new int[n + 1][2];        for (int i = 0; i < n; i++) {            strings = br.readLine().split(\" \");            arr1[Integer.parseInt(strings[0])][0] = Integer.parseInt(strings[1]);            arr1[Integer.parseInt(strings[0])][1] = Integer.parseInt(strings[2]);        }        createTree(head1, arr1);        printByLevel(head1);        System.out.println();        printZigZag(head1);    }     public static void createTree(Node head, int[][] arr) {        if (head == null) {            return;        }        if (arr[head.value][0] != 0) {            head.left = new Node(arr[head.value][0]);            createTree(head.left, arr);        }        if (arr[head.value][1] != 0) {            head.right = new Node(arr[head.value][1]);            createTree(head.right, arr);        }    }}  class Node {    public int value;    public Node left;    public Node right;     public Node(int data) {        this.value = data;    }}": 4,
  "nce=sorted(table)[::-1]\n": 0,
  "queue as Q\n": 1,
  "datetime\n": 4,
  "unicodedata\n": 0,
  "java.util.Collections;\n": 0,
  "java.util.Comparator;\n": 0,
  "java.util.Map.Entry;\n": 0,
  "java.util.Set;\n": 0,
  "fractions\n": 1,
  " collections\n": 4,
  "collections \n": 0,
  "random;\n": 4,
  " itertools\n": 3,
  "math \n": 3,
  "io\n": 8,
  "difflib\n": 0,
  "heapq, itertools\n": 0,
  "sys, string\n": 4,
  "sys, os, io, collections\n": 0,
  "sys, os, io\n": 2,
  "sys, io, os\n": 3,
  "sys, io, os, itertools\n": 0,
  "pandas as pd\n": 4,
  "collections;\n": 1,
  "functools as ft\n": 1,
  "functools as tf\n": 0,
  "typing.List\n": 0,
  "heapq#堆\n": 0,
  "re,collections,functools\n": 1,
  "functools,collections\n": 16,
  "re,sys\n": 1,
  " re, collections\n": 0,
  "re,collections\n": 5,
  "functools,math\n": 0,
  "decimal\n": 1,
  "sympy\n": 0,
  "math                                                       \n": 1,
  " bisect\n": 0,
  "math  \n": 2,
  "typing\n": 0
}